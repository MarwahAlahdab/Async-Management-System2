// <auto-generated />
using System;
using Async2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Async2.Migrations
{
    [DbContext(typeof(AsyncDBContext))]
    [Migration("20230811151344_SeedDistrictManager")]
    partial class SeedDistrictManager
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Async2.Models.Amenity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "coffee maker"
                        },
                        new
                        {
                            ID = 2,
                            Name = "air conditioning"
                        },
                        new
                        {
                            ID = 3,
                            Name = "ocean view"
                        });
                });

            modelBuilder.Entity("Async2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d94674e6-1384-4422-bd37-891674065dd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5fd59d5-b110-4ac5-b1e8-631a6417c358",
                            Email = "d_manager1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOg9hnWxhGkg7o4L+4HEptyz4LcN9Mqf/Kp9rDzw5rUjqjdPv4UI4/zKAUAZyJhdBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "517cefd1-4e71-48eb-87e3-9f7c415b81b2",
                            TwoFactorEnabled = false,
                            UserName = "manager1"
                        });
                });

            modelBuilder.Entity("Async2.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "amman",
                            Country = "country 1",
                            Name = "Hotel 1",
                            Phone = "123-456-7890",
                            State = "state1",
                            StreetAddress = "Address1"
                        },
                        new
                        {
                            Id = 2,
                            City = "amman",
                            Country = "country 2",
                            Name = "Hotel 2",
                            Phone = "123-456-7890",
                            State = "state2",
                            StreetAddress = "Address2"
                        });
                });

            modelBuilder.Entity("Async2.Models.HotelRoom", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("PetFriendly")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelRooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            HotelId = 1,
                            PetFriendly = true,
                            Rate = 100m,
                            RoomNumber = 101
                        },
                        new
                        {
                            RoomId = 2,
                            HotelId = 1,
                            PetFriendly = false,
                            Rate = 120m,
                            RoomNumber = 102
                        },
                        new
                        {
                            RoomId = 3,
                            HotelId = 2,
                            PetFriendly = true,
                            Rate = 150m,
                            RoomNumber = 201
                        });
                });

            modelBuilder.Entity("Async2.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Layout")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Layout = 0,
                            Name = "Room 1"
                        },
                        new
                        {
                            ID = 2,
                            Layout = 1,
                            Name = "Room 2"
                        },
                        new
                        {
                            ID = 3,
                            Layout = 2,
                            Name = "Room 3"
                        });
                });

            modelBuilder.Entity("Async2.Models.RoomAmenity", b =>
                {
                    b.Property<int>("roomId")
                        .HasColumnType("int");

                    b.Property<int>("amenityId")
                        .HasColumnType("int");

                    b.HasKey("roomId", "amenityId");

                    b.HasIndex("amenityId");

                    b.ToTable("RoomAmenities");

                    b.HasData(
                        new
                        {
                            roomId = 1,
                            amenityId = 1
                        },
                        new
                        {
                            roomId = 1,
                            amenityId = 2
                        },
                        new
                        {
                            roomId = 2,
                            amenityId = 1
                        },
                        new
                        {
                            roomId = 3,
                            amenityId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "district manager",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "District Manager",
                            NormalizedName = "DISTRICT MANAGER"
                        },
                        new
                        {
                            Id = "property manager",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Property Manager",
                            NormalizedName = "PROPERTY MANAGER"
                        },
                        new
                        {
                            Id = "agent",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Agent",
                            NormalizedName = "AGENT"
                        },
                        new
                        {
                            Id = "anonymous",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Anonymous",
                            NormalizedName = "ANONYMOUS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 35,
                            ClaimType = "permissions",
                            ClaimValue = "hotel.create",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permissions",
                            ClaimValue = "hotel.read",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permissions",
                            ClaimValue = "hotel.update",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permissions",
                            ClaimValue = "hotel.delete",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.create",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.read",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.update",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.delete",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "permissions",
                            ClaimValue = "room.create",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "permissions",
                            ClaimValue = "room.read",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "permissions",
                            ClaimValue = "room.update",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "permissions",
                            ClaimValue = "room.delete",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.create",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.read",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.update",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.delete",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "permissions",
                            ClaimValue = "role.create",
                            RoleId = "district manager"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.create",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.read",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.update",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.delete",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.create",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.read",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.update",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.delete",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "permissions",
                            ClaimValue = "role.create.agent",
                            RoleId = "property manager"
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.read",
                            RoleId = "agent"
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.update",
                            RoleId = "agent"
                        },
                        new
                        {
                            Id = 63,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.create",
                            RoleId = "agent"
                        },
                        new
                        {
                            Id = 64,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.delete",
                            RoleId = "agent"
                        },
                        new
                        {
                            Id = 65,
                            ClaimType = "permissions",
                            ClaimValue = "hotel.read",
                            RoleId = "anonymous"
                        },
                        new
                        {
                            Id = 66,
                            ClaimType = "permissions",
                            ClaimValue = "hotelroom.read",
                            RoleId = "anonymous"
                        },
                        new
                        {
                            Id = 67,
                            ClaimType = "permissions",
                            ClaimValue = "room.read",
                            RoleId = "anonymous"
                        },
                        new
                        {
                            Id = 68,
                            ClaimType = "permissions",
                            ClaimValue = "amenity.read",
                            RoleId = "anonymous"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d94674e6-1384-4422-bd37-891674065dd7",
                            RoleId = "District Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Async2.Models.HotelRoom", b =>
                {
                    b.HasOne("Async2.Models.Hotel", "Hotel")
                        .WithMany("HotelRooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Async2.Models.Room", "Room")
                        .WithMany("HotelRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Async2.Models.RoomAmenity", b =>
                {
                    b.HasOne("Async2.Models.Amenity", "Amenity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("amenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Async2.Models.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Async2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Async2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Async2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Async2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Async2.Models.Amenity", b =>
                {
                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("Async2.Models.Hotel", b =>
                {
                    b.Navigation("HotelRooms");
                });

            modelBuilder.Entity("Async2.Models.Room", b =>
                {
                    b.Navigation("HotelRooms");

                    b.Navigation("RoomAmenities");
                });
#pragma warning restore 612, 618
        }
    }
}
